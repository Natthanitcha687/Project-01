generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STORE
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  passwordHash     String
  role             Role
  emailVerifiedAt  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // one-to-one profiles (optional depending on role)
  customerProfile  CustomerProfile?
  storeProfile     StoreProfile?

  // relations for tokens
  verificationTokens VerificationToken[]
  resetTokens        PasswordResetToken[]
  warranties         Warranty[]
}

model CustomerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phone       String
  isConsent   Boolean @default(false)
}
model StoreProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName           String
  storeType           String
  ownerName           String
  contactName         String?
  phone               String
  email               String?
  address             String
  businessHours       String
  avatarUrl           String?
  notifyDaysInAdvance Int      @default(14)
  isConsent           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  warranties          Warranty[]
}


model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}
model Warranty {
  id             String   @id @default(cuid())
  storeId        Int
  store          User     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  customerName   String?
  customerEmail  String
  customerPhone  String?
  productName    String
  serial         String?
  purchaseDate   DateTime
  expiryDate     DateTime?
  durationMonths Int?
  durationDays   Int?
  coverageNote   String?
  note           String?
  documents      Json?
  images         Json?    // เก็บ array ของ image URLs
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  StoreProfile StoreProfile[]
}