generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // change to postgresql or mysql in production
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STORE
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  passwordHash     String
  role             Role
  emailVerifiedAt  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // one-to-one profiles (optional depending on role)
  customerProfile  CustomerProfile?
  storeProfile     StoreProfile?

  // relations for tokens
  verificationTokens VerificationToken[]
  resetTokens        PasswordResetToken[]
}

model CustomerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phone       String
  isConsent   Boolean @default(false)
}

model StoreProfile {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName     String
  typeStore     String
  ownerStore    String
  phone         String
  address       String
  timeAvailable String  // e.g. "Mon-Fri 09:00-18:00"
  isConsent     Boolean @default(false)
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}
