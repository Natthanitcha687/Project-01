generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STORE
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  passwordHash     String
  role             Role
  emailVerifiedAt  DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  customerProfile  CustomerProfile?
  storeProfile     StoreProfile?

  verificationTokens VerificationToken[]
  resetTokens        PasswordResetToken[]

  warranties        Warranty[]      // ใบรับประกัน (Header) ทั้งหมดของร้านนี้
}

model CustomerProfile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phone       String
  isConsent   Boolean @default(false)
}

model StoreProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeName           String
  storeType           String
  ownerName           String
  contactName         String?
  phone               String
  email               String?
  address             String
  businessHours       String
  avatarUrl           String?
  notifyDaysInAdvance Int      @default(14)
  isConsent           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
}

model Warranty {
  id            String         @id @default(cuid())
  storeId       Int
  store         User           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  code          String         // เดิม @unique (ลบออก)
  customerEmail String?        // เก็บระดับใบ (ใช้ของรายการแรก ถ้า UI แยกก็ได้)
  customerName  String?
  customerPhone String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  items         WarrantyItem[]

  /// ทำให้ WR ยูนีค “แยกร้าน”
  @@unique([storeId, code], name: "storeId_code")
}

model WarrantyItem {
  id             String   @id @default(cuid())
  warrantyId     String
  warranty       Warranty @relation(fields: [warrantyId], references: [id], onDelete: Cascade)

  productName    String
  serial         String?  // ยังเป็น optional เพื่อไม่ทำลายข้อมูลเก่า แต่เราจะ auto-fill ตอนสร้างใหม่
  purchaseDate   DateTime
  expiryDate     DateTime?
  durationMonths Int?
  durationDays   Int?
  coverageNote   String?
  note           String?
  documents      Json?
  images         Json?     // เก็บ array ของ image URLs

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  /// ทำให้ SN ยูนีค “ภายในใบเดียวกัน” (ถ้าเป็นค่าไม่-null)
  @@unique([warrantyId, serial], name: "warrantyId_serial")
}
